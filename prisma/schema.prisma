generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  username      String?   @unique
  firstName     String?
  lastName      String?
  role          UserRole  @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  videos        Video[]
  products      Product[]
  orders        Order[]
  earnings      Earning[]
  sponsorships  Sponsorship[]
  subscription  Subscription?
}

model Video {
  id              String    @id @default(cuid())
  title           String
  description     String?   @db.Text
  url             String?
  thumbnailUrl    String?
  duration        Int?      // Duration in seconds
  status          VideoStatus @default(PENDING_REVIEW)
  visibility      Visibility @default(PRIVATE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  publishedAt     DateTime?
  creator         User      @relation(fields: [creatorId], references: [id])
  creatorId       String
  sponsorships    Sponsorship[]
  impressions     Int       @default(0)
  earnings        Earning[]
  rejectionReason String?   @db.Text
  hlsUrl          String?   // URL for HLS stream
}

model Sponsor {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  website       String?
  logoUrl       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sponsorships  Sponsorship[]
}

model Sponsorship {
  id          String    @id @default(cuid())
  sponsor     Sponsor   @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  video       Video     @relation(fields: [videoId], references: [id])
  videoId     String
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String
  amount      Float
  startDate   DateTime
  endDate     DateTime?
  status      SponsorshipStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  price       Float
  imageUrl    String?
  shopifyId   String?   @unique
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      OrderItem[]
}

model Order {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  total       Float
  status      OrderStatus @default(PENDING)
  stripeId    String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem {
  id          String    @id @default(cuid())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  price       Float
}

model PPVEvent {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  price       Float
  startTime   DateTime
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  accesses    PPVEventAccess[]
}

model PPVEventAccess {
  id          String    @id @default(cuid())
  event       PPVEvent  @relation(fields: [eventId], references: [id])
  eventId     String
  userId      String
  purchasedAt DateTime  @default(now())
  stripeId    String?   @unique
}

model Subscription {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  tier        SubscriptionTier
  status      SubscriptionStatus @default(ACTIVE)
  stripeId    String?   @unique
  startDate   DateTime  @default(now())
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Earning {
  id          String    @id @default(cuid())
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String
  video       Video     @relation(fields: [videoId], references: [id])
  videoId     String
  amount      Float
  type        EarningType
  createdAt   DateTime  @default(now())
}

model PartnerLead {
  id          String    @id @default(cuid())
  companyName String
  contactName String
  email       String
  phone       String?
  message     String?   @db.Text
  status      LeadStatus @default(NEW)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SponsorLead {
  id          String    @id @default(cuid())
  companyName String
  contactName String
  email       String
  phone       String?
  budget      Float?
  message     String?   @db.Text
  status      LeadStatus @default(NEW)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  CREATOR
  SPONSOR
  VIEWER
}

enum VideoStatus {
  PENDING_REVIEW
  PROCESSING
  APPROVED
  REJECTED
  FAILED
  READY
}

enum Visibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum SponsorshipStatus {
  PENDING
  ACTIVE
  COMPLETED
  REJECTED
}

enum EarningType {
  SPONSORSHIP
  PRODUCT_SALE
  VIDEO_IMPRESSION
  TIP
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  REJECTED
}