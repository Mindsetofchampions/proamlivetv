// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  username      String?   @unique
  firstName     String?
  lastName      String?
  role          UserRole  @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  videos        Video[]
  products      Product[]
  orders        Order[]
  earnings      Earning[]
  sponsorships  Sponsorship[]
}

model Video {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  url           String
  thumbnailUrl  String?
  duration      Int?     // Duration in seconds
  status        VideoStatus @default(PENDING_REVIEW)
  visibility    Visibility @default(PRIVATE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  publishedAt   DateTime?
  creator       User     @relation(fields: [creatorId], references: [id])
  creatorId     String
  sponsorships  Sponsorship[]
  impressions   Int      @default(0)
  earnings      Earning[]
  rejectionReason String? @db.Text
  hlsUrl        String?  // URL for HLS stream after transcoding
  sponsorSpots  SponsorSpot[]
}

model SponsorSpot {
  id          String   @id @default(cuid())
  video       Video    @relation(fields: [videoId], references: [id])
  videoId     String
  sponsor     Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  startTime   Int      // Start time in seconds
  endTime     Int      // End time in seconds
  type        SponsorSpotType
  status      SponsorSpotStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  price       Float
  imageUrl    String?
  inventory   Int      @default(0)
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  status      ProductStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      OrderItem[]
}

model Order {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  total       Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  price       Float
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String
  logoUrl     String
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sponsorships Sponsorship[]
  sponsorSpots SponsorSpot[]
}

model Sponsorship {
  id          String   @id @default(cuid())
  sponsor     Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  video       Video    @relation(fields: [videoId], references: [id])
  videoId     String
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  status      SponsorshipStatus @default(PENDING)
  amount      Float
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Earning {
  id          String   @id @default(cuid())
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  video       Video    @relation(fields: [videoId], references: [id])
  videoId     String
  amount      Float
  type        EarningType
  createdAt   DateTime @default(now())
}

enum UserRole {
  ADMIN
  CREATOR
  SPONSOR
  VIEWER
}

enum VideoStatus {
  PENDING_REVIEW
  PROCESSING
  APPROVED
  REJECTED
  FAILED
  READY
}

enum Visibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  SOLD_OUT
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum SponsorshipStatus {
  PENDING
  ACTIVE
  COMPLETED
  REJECTED
}

enum EarningType {
  SPONSORSHIP
  PRODUCT_SALE
  VIDEO_IMPRESSION
  TIP
}

enum SponsorSpotType {
  PRE_ROLL
  MID_ROLL
  POST_ROLL
  OVERLAY
  PRODUCT_PLACEMENT
}

enum SponsorSpotStatus {
  PENDING
  APPROVED
  REJECTED
}